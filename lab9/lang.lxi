
%{ 	 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"
int currentLine = 1;
%} 

%option noyywrap

IDENTIFIER		[a-zA-Z_][a-zA-Z0-9_]*
NUMBER_CONST	0|[+|-]?[1-9][0-9]*([.][0-9]*)?|[+|-]?0[.][0-9]*
STRING_CONST	[\"][a-zA-Z0-9 ]+[\"]

%%

"citeste"		{printf("Reserved word: %s\n", yytext); return CITESTE;}
"printeaza"	{printf("Reserved word: %s\n", yytext); return PRINTEAZA;}
"daca"		{printf("Reserved word: %s\n", yytext); return DACA;}
"altfel"		{printf("Reserved word: %s\n", yytext); return ALTFEL;}
"pentru"		{printf("Reserved word: %s\n", yytext); return PENTRU;}
"panacand"		{printf("Reserved word: %s\n", yytext); return PANACAND;}
"numar"		{printf("Reserved word: %s\n", yytext); return NUMAR;}
"string"		{printf("Reserved word: %s\n", yytext); return STRING;}
"si"		{printf("Reserved word: %s\n", yytext); return SI;}
"sau"	{printf("Reserved word: %s\n", yytext); return SAU;}
"true"		{printf("Reserved word: %s\n", yytext); return TRUE;}
"false"	{printf("Reserved word: %s\n", yytext); return FALSE;}

"<="		{printf("Operator %s\n", yytext); return lessOrEqual;}
">="		{printf("Operator %s\n", yytext); return moreOrEqual;}
"<"		{printf("Operator %s\n", yytext); return  less;}
">"		{printf("Operator %s\n", yytext); return more;}
"=="		{printf("Operator %s\n", yytext); return equal;}
"!="		{printf("Operator %s\n", yytext); return different;}
"="		{printf("Operator %s\n", yytext); return eq;}

"{"		{printf("Separator %s\n", yytext); return leftCurlyBracket;}
"}"		{printf("Separator %s\n", yytext); return rightCurlyBracket;}
"("		{printf("Separator %s\n", yytext); return leftRoundBracket;}
")"		{printf("Separator %s\n", yytext); return rightRoundBracket;}
"["		{printf("Separator %s\n", yytext); return leftBracket;}
"]"		{printf("Separator %s\n", yytext); return rightBracket;}
":"		{printf("Separator %s\n", yytext); return colon;}
";"		{printf("Separator %s\n", yytext); return semicolon;}
","		{printf("Separator %s\n", yytext); return comma;}
"\""		{printf("Separator %s\n", yytext); return quote;}

{IDENTIFIER}		{printf("Identifier: %s\n", yytext); return IDENTIFIER;}
{NUMBER_CONST}		{printf("Number: %s\n", yytext); return NUMBER_CONST;}
{STRING_CONST}		{printf("String: %s\n", yytext); return STRING_CONST;}

[ ]+ 		{}
[\t]+		{}
[\n]+		{currentLine++;}

[0-9][a-zA-Z0-9_]*				{printf("Illegal identifier at line %d : %s\n", currentLine, yytext);}
[+|-]?[0][0-9]*([.][0-9]*)?		{printf("Illegal numeric constant at line %d\n", currentLine);}

%%
